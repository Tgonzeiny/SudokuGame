public class SudokuGenerator{
    private int [][] board;
    public static final int EMPTY = 0; // Empty cell marker
    public static final int SIZE = 9; // Size of the grid

    public SudokuGenerator(){
        this.board = new int [SIZE][SIZE];
    }

    private boolean isSafe(int row, int col, int num){
        for(int d =0; d<board.length; d++){
            if(board[row][d]== num){
                retunr false;
            }
        }
        for(int r = 0; r<board.length; r++){
            if (board[r][col] == num){
                return false;
            }
        }
        int sqrt = (int) Math.sqrt(board.length);
        int boxRowStart = row - row % sqrt;
        int boxColStart = col - col % sqrt;

        for (int r  = boxRowStart; r < boxRowStart + sqrt; r++){
            for(int d = boxColStart; d < boxColStart + sqrt; d++){
                if (board[r][d]==num){
                    return false;
                }
            }
        }
        return true;
    }

    public boolean solveSudoku(){
        for(int row = 0; row < SIZE; row++){
            for(int col = 0; col < SIZE; col++)
                if(board[row][col] == EMPTY){
                    for(int number = 1;  number<= SIZE; number++){
                        if(isSafe(row, col, number)){
                            board[row][col] = number;
                            
                            if(solveSudoku()){
                                return true;
                            } else {
                                board[row][col] = EMPTY;
                            }
                        }
                    }
                    return false;
                }
        }       return true;
    }

}